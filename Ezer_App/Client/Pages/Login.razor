@page "/login"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<div class="logreg-container d-flex justify-content-center gap-5 mt-4">

  <div class="reg col-lg-4 col-xl-3 shadow-sm">
    <div class="card shadow-sm">
      <div class="card-header">
        <h2 class="text-ezer">Register</h2>
      </div>
      <div class="card-body p-4">

        <EditForm Model="@newUser" OnValidSubmit="@ModalAgree">
          <DataAnnotationsValidator />

          <div class="form-floating">
            <InputText id="FirstName" @bind-Value="newUser.FirstName" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="FirstName">First Name:</label>
            <ValidationMessage For="() => newUser.FirstName" />
          </div>
          <div class="form-floating mt-3">
            <InputText id="LastName" @bind-Value="newUser.LastName" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="LastName">Last Name:</label>
            <ValidationMessage For="() => newUser.LastName" />
          </div>
          <div class="form-floating mt-3">
            <InputText id="Email" @bind-Value="newUser.Email" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="Email">Email:</label>
            <ValidationMessage For="() => newUser.Email" />
            <div class="validation-error mb-3" style="color: #eb3135;">
              @userExists
            </div>
          </div>
          <div class="form-floating mt-3">
            <InputText id="Password" @bind-Value="newUser.Password" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="Password">Password:</label>
            <ValidationMessage For="() => newUser.Password" />
          </div>
          @* <div class="form-floating mt-3">
            <InputText id="ConfirmPassword" @bind-Value="newUser.ConfirmPassword" class="form-control" placeholder="F"
              style="font-size: .8rem; height: 45px" />
            <label for="ConfirmPassword">Confirm Password:</label>
            <ValidationMessage For="() => newUser.ConfirmPassword" />
          </div> *@
          <button type="button" class="mt-3 btn btn-primary" @onclick="() => OpenDisclaimerModal()">Register</button>

          @if (DisclaimerModelOpen)
          {
            <div class="modal fade show" id="myModal" style="display:block; backdrop-filter: blur(5px);" aria-modal="true"
              role="dialog">
              <div class="modal-dialog shadow">
                <div class="modal-content">
                  <div class="modal-header d-flex align-items-start">
                    <div style="width: 30px;"></div>
                    <div class="text m-auto">
                      <h4 class="display-6">DISCLAIMER</h4>
                      <h5 class="mb-0 display-6" style="font-size: 1.5rem;">Please read...</h5>
                    </div>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="@ModalCancel"><span class="oi oi-x"
                        aria-hidden="true"></span></button>
                  </div>
                  <div class="modal-body">
                    <p>@ModalBody</p>
                  </div>
                  <div class="modal-footer">
                    <div class="footer-buttons d-flex gap-5 m-auto">
                      <a href="/" class="btn btn-primary">No Thanks</a>
                      <button type="submit" class="btn btn-success">I Agree</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          }

        </EditForm>

      </div>
    </div>
  </div>

  <div style="width: 20px;"></div>

  <div class="login col-lg-4 col-xl-3">
    <div class="card shadow-sm">
      <div class="card-header">
        <h2 class="text-ezer">Login</h2>
      </div>
      <div class="card-body p-4">

        <EditForm Model="@loginUser" OnValidSubmit="@LoginSubmit">
          <DataAnnotationsValidator />
          <div class="validation-error mb-3" style="color: #eb3135;">
            @notInDB
          </div>

          <div class="form-floating">
            <InputText for="LogEmail" class="form-control" placeholder="F" style="font-size: .8rem; height: 45px"
            @bind-Value="loginUser.LogEmail" />
            <label id="LogEmail">Email:</label>
            <ValidationMessage For="() => loginUser.LogEmail" />
          </div>
          <div class="form-floating mt-3">
            <InputText for="LogPassword" class="form-control" placeholder="F" style="font-size: .8rem; height: 45px"
            @bind-Value="loginUser.LogPassword" />
            <label id="LogPassword">Password:</label>
            <ValidationMessage For="() => loginUser.LogPassword" />
          </div>
          <button type="submit" class="mt-3 btn btn-primary">Login</button>
        </EditForm>

      </div>
    </div>
  </div>
</div>


@code {
  @* modal functions *@
  [Parameter]
  public EventCallback<bool> OnClose { get; set; }
  User? newUser = new User();
  LoginUser? loginUser = new LoginUser();

  [Parameter]
  public string ModalBody { get; set; } = "This is the modal body.";
  public string userExists { get; set; } = "";
  public string notInDB { get; set; } = "";
  public User? createdUser { get; set; }
  User? loggedInUser { get; set; }
  private async Task ModalAgree()
  {
    DisclaimerModelOpen = false;
    createdUser = await UserService.CreateUser(newUser);
    if (createdUser != null)
    {
      await localStorage.SetItemAsync("UUID", createdUser.UserId);
      await localStorage.SetItemAsync("UserName", createdUser.FirstName);
      StateHasChanged();
      NavigationManager.NavigateTo("dashboard", forceLoad: true);
    }
    else
    {
      userExists = "Email is already registered.";
      StateHasChanged();
    }
  }
  private async Task LoginSubmit()
  {
    loggedInUser = await UserService.LoginUser(loginUser);
    if (loggedInUser != null)
    {
      await localStorage.SetItemAsync("UUID", loggedInUser.UserId);
      await localStorage.SetItemAsync("UserName", loggedInUser.FirstName);
      await localStorage.SetItemAsync("DueDate", loggedInUser.DueDate);
      StateHasChanged();
      NavigationManager.NavigateTo("dashboard", forceLoad: true);
    }
    else
    {
      notInDB = "Invalid Email/Password.";
      StateHasChanged();
    }
  }
  private void ModalCancel()
  {
    DisclaimerModelOpen = false;
  }
  protected override async Task OnInitializedAsync()
  {
    string currentUrl = NavigationManager.Uri;
    StateHasChanged();
  }




  public bool DisclaimerModelOpen { get; set; }



  private void OnDisclaimerAgree(bool accepted)
  {
    DisclaimerModelOpen = false;
    StateHasChanged();
  }

  private void OpenDisclaimerModal()
  {
    DisclaimerModelOpen = true;
    StateHasChanged();
  }
}